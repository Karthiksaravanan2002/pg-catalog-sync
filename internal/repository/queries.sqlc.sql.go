// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sqlc.sql

package repository

import (
	"context"
	"time"

	"github.com/Karthiksaravanan2002/pg-catalog-sync/internal/domain"
)

const getCatalog = `-- name: GetCatalog :one
SELECT id, source, synced_at FROM catalogs WHERE id = $1
`

func (q *Queries) GetCatalog(ctx context.Context, id string) (domain.Catalog, error) {
	row := q.db.QueryRowContext(ctx, getCatalog, id)
	var i domain.Catalog
	err := row.Scan(&i.ID, &i.Source, &i.SyncedAt)
	return i, err
}

const insertCatalog = `-- name: InsertCatalog :exec
INSERT INTO catalogs (id, source, synced_at) VALUES ($1, $2, $3)
ON CONFLICT (id) DO UPDATE SET source = EXCLUDED.source, synced_at = EXCLUDED.synced_at
`

type InsertCatalogParams struct {
	ID       string    `json:"id"`
	Source   string    `json:"source"`
	SyncedAt time.Time `json:"synced_at"`
}

func (q *Queries) InsertCatalog(ctx context.Context, arg InsertCatalogParams) error {
	_, err := q.db.ExecContext(ctx, insertCatalog, arg.ID, arg.Source, arg.SyncedAt)
	return err
}

const insertColumn = `-- name: InsertColumn :exec
INSERT INTO columns (table_id, name, type, nullable) VALUES ($1, $2, $3, $4)
`

type InsertColumnParams struct {
	TableID  int64  `json:"table_id"`
	Name     string `json:"name"`
	Type     string `json:"type"`
	Nullable bool   `json:"nullable"`
}

func (q *Queries) InsertColumn(ctx context.Context, arg InsertColumnParams) error {
	_, err := q.db.ExecContext(ctx, insertColumn,
		arg.TableID,
		arg.Name,
		arg.Type,
		arg.Nullable,
	)
	return err
}

const insertSchema = `-- name: InsertSchema :one
INSERT INTO schemas (catalog_id, name) VALUES ($1, $2) RETURNING id
`

type InsertSchemaParams struct {
	CatalogID string `json:"catalog_id"`
	Name      string `json:"name"`
}

func (q *Queries) InsertSchema(ctx context.Context, arg InsertSchemaParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertSchema, arg.CatalogID, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertTable = `-- name: InsertTable :one
INSERT INTO tables (schema_id, name) VALUES ($1, $2) RETURNING id
`

type InsertTableParams struct {
	SchemaID int64  `json:"schema_id"`
	Name     string `json:"name"`
}

func (q *Queries) InsertTable(ctx context.Context, arg InsertTableParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertTable, arg.SchemaID, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listCatalogs = `-- name: ListCatalogs :many
SELECT id, source, synced_at FROM catalogs ORDER BY synced_at DESC
`

func (q *Queries) ListCatalogs(ctx context.Context) ([]domain.Catalog, error) {
	rows, err := q.db.QueryContext(ctx, listCatalogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []domain.Catalog{}
	for rows.Next() {
		var i domain.Catalog
		if err := rows.Scan(&i.ID, &i.Source, &i.SyncedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchemasByCatalog = `-- name: ListSchemasByCatalog :many
SELECT id, catalog_id, name FROM schemas WHERE catalog_id = $1
`

func (q *Queries) ListSchemasByCatalog(ctx context.Context, catalogID string) ([]domain.Schema, error) {
	rows, err := q.db.QueryContext(ctx, listSchemasByCatalog, catalogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []domain.Schema{}
	for rows.Next() {
		var i domain.Schema
		if err := rows.Scan(&i.ID, &i.CatalogID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
